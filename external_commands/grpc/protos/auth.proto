syntax="proto3";

package api;

service SA {
    rpc Current(VerifyTokenRequest) returns (Authorization) {}
}

message Session {

    string uuid = 1; // session key

    int64  dc = 2; // current domain.dc component
    string domain = 3; // session domain.name
    int64  user_id = 4; // current user.id
    string username = 5; // session user-friendly role name

    string network_ip = 6; // remote IP address; assigned while authorization
    string user_agent = 7; // remote User-Agent; assigned while authorization

    // repeated string roles = 8; // group.name(s)
    // repeated string scope = 9; // permission.name(s)

    int64 accessed_at = 10; // unix: last seen
    int64 created_at = 11; // unix
    int64 expires_at = 12; // unix
}

// AccessScope represents authorized access level
// to object class declaration within domain namespace
message AccessScope {
    // Inherit::ObjectClass
    int64  id = 1;     // class: object id
    string class = 2;  // class: alphanumeric code name
    uint32 access = 3; // flags: [ CREATE | SELECT | UPDATE | DELETE ]
    // Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?
    bool abac = 4;  // [A]ttribute-[b]ased;  not implemented; next releases ...
    bool obac = 5;  // [O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)
    bool rbac = 6;  // [R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)
}

message VerifyTokenRequest {
    string access_token = 1;
}

// Authorization. Current.
message Authorization {
    // current::authorization
    int64  dc = 1; // current domain component
    string domain = 2; // current domain name
    int64  role_id = 3; // current role id
    string username = 4; // current role name
    // session::authorization (primary)
    Session session = 5;
    // authorization::subject(s) whose privileges extends to the current role
    map <string, int64>  roles = 6; // map[:role]:oid
    // MAC: set of access privileges assigned to current role::subject(s)
    map <string, string> privs = 7; // map[:priv]:uuid { "sysadmin":1, "CALL_MANAGER":712342168, "CALL_CENTER":32435456 }
    // DAC: set of object class(es) on which at least SELECT privilege is granted to current role::subject(s)
    repeated AccessScope scope = 8; // [{ "id":1, "class":"queue", "obac":false, "rbac":true, "access":7 },...]

}