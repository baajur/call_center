syntax = "proto3";

import "google/api/annotations.proto";

package cc;

service MemberService {
    rpc AttemptResult(AttemptResultRequest) returns (AttemptResultResponse) {
        option (google.api.http) = {
            patch: "/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}"
        };
    }

    rpc CallJoinToQueue(CallJoinToQueueRequest) returns (stream QueueEvent) {}

//    rpc CallJoinToQueueStream(CallJoinToQueueRequest) returns (stream QueueEvent) {}


    rpc ChatJoinToQueue(ChatJoinToQueueRequest) returns (ChatJoinToQueueResponse) {}

//    rpc Conversation(AnswerConversationRequest) returns (AnswerConversationResponse) {}

    rpc EmailJoinToQueue(EmailJoinToQueueRequest) returns (EmailJoinToQueueResponse) {}
    rpc DirectAgentToMember(DirectAgentToMemberRequest) returns (DirectAgentToMemberResponse) {}
}

message QueueEvent {
    string name = 1;

    message BridgedData {
        int32 agent_id = 1;
        string agent_call_id = 2;
    }

    message LeavingData {
        string result = 1;
    }

    oneof data {
        BridgedData bridged = 2;
        LeavingData leaving = 3;
    }
}


message AnswerConversationRequest {
    string channel_id = 1;
}

message AnswerConversationResponse {

}

message ChatJoinToQueueRequest {
    string channel_id = 1;
    string queue_name = 2;
    int64 queue_id = 3;
    int32 priority = 4;
    string name = 5;
    string  number = 6;

    int64 domain_id = 100;
}

message ChatJoinToQueueResponse {
    string status = 1;
    string queue_name = 2;
    string welcome_text = 3;
    int64 attempt_id = 4;
}

message EmailJoinToQueueRequest {
    string email_id  = 1;
    int32 queue_id = 2;

    int64 domain_id = 100; // todo
}

message EmailJoinToQueueResponse {
    string status = 1;
}

message DirectAgentToMemberRequest {
    int64 member_id = 1;
    int64 agent_id = 2;

    int32 communication_id = 3;
    int64 domain_id = 4;
}
message DirectAgentToMemberResponse {
    int64 attempt_id = 1;
}

message CallJoinToQueueRequest {
    message Queue {
        int32 id = 1;
        string name = 2;
    }
    message WaitingMusic {
        int32 id = 1;
        string name = 2;
        string type = 3;
    }

    string member_call_id = 1;
    Queue queue = 2;
    WaitingMusic waitingMusic = 3;
    int32 timeout = 4;
    int32 priority = 5;
    map<string,string> variables= 6;

    int64 domain_id = 100;
}

message CallJoinToQueueResponse {
    string status = 1;
}

/*
1. Завершити обдзвын, тобто на нього быльше не буде розприділятися
2. Час від коли він знову попаде в розподіл
3. Коментар
4. Можливість задати варіблу (змінити поки хз:( )
5. Перекинути у іншу чергу(теж хз чи потрібно)
6. Привязати номер який показувати при наступному дзвінку(display number)
*/

message AttemptResultRequest {
    int64 attempt_id = 1; // ід спроби
    string status = 2; // SUCCESS / CANCEL - абонент виключається з черги з цим статусом, якщо пусто то: якщо остання спроба то ABANDONED або буде очікувати наступний дзвінок



    int64 min_offering_at = 3; // - змінити час відколи можна знову дзвонити абоненту, не обовязкове timestamp
    int64 expire_at = 4; // встановити новий дедлайн
    map<string, string> variables = 5; // змінити варібли
    bool display = 6; // якщо true тоді за цим номером прикріпляється ресурс + номер який відображається абоненту
    string description = 7; // опис...
    int64 transfer_queue_id = 8; // перекинути в іншу чергу
}

message AttemptResultResponse {
    string status = 1;
}