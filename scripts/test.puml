@startuml

interface Chat {
    Id() string
}

interface Call {
	Id() string
	NodeName() string

	FromNumber() string
	FromName() string

	QueueId() *int
	QueueCallPriority() int

	Invite() *model.AppError
	State() <-chan CallState

	HangupCause() string
	HangupCauseCode() int
	GetState() CallState
	Err() *model.AppError

	CallAction() <-chan CallAction
	AddAction(action CallAction)

	BridgeId() *string

	OfferingAt() int64
	AcceptAt() int64
	BridgeAt() int64
	HangupAt() int64
	ReportingAt() int64

	DurationSeconds() int
	BillSeconds() int
	AnswerSeconds() int
	WaitSeconds() int

	WaitForHangup()
	HangupChan() <-chan struct{}

	NewCall(callRequest *model.CallRequest) Call
	ExecuteApplications(apps []*model.CallRequestApplication) *model.AppError
	Hangup(cause string, reporting bool) *model.AppError
	Hold() *model.AppError
	DTMF(val rune) *model.AppError
	Bridge(other Call) *model.AppError
}

class BaseQueue {

}
class CallQueue {
}
abstract class  Queue {
	Name() string
	IsExpire(int64) bool
	TypeName() string
	DistributeAttempt(attempt *Attempt) *model.AppError
	Variables() map[string]string
	Domain() string
	Id() int
}
abstract class Member
abstract class Agent

@enduml